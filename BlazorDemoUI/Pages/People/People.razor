@page "/"
@page "/People/People"

@using BlazorDemo.Api.Models
@using BlazorDemo.UI.Models
@using Microsoft.Extensions.Configuration
@using System.IO
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject IConfiguration Configuration

<PageTitle Value="Personer" />

<h4 style="font-weight:bold">Lägg till en person</h4>
<hr />
<ServerValidations IsVisible="IsVisible" IsValid="IsValid" IsDeleting="IsDeleting">
    <span>@RecordName</span>
</ServerValidations>

<EditForm Model="@_displayPerson" OnValidSubmit="@SavePersonAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>
        Förnamn
        <InputText id="firstName" @bind-Value="@_displayPerson.FirstName" placeholder="Förnamn"></InputText>
    </label>
    <label>
        Efternamn
        <InputText id="lastName" @bind-Value="@_displayPerson.LastName" placeholder="Efternamn"></InputText>
    </label>
    <label>
        Mailadress
        <InputText id="emailAddress" @bind-Value="@_displayPerson.EmailAddress" placeholder="Email"></InputText>
    </label>

    <button type="submit" class="btn btn-primary">Spara</button>
</EditForm>


<h4 style="font-weight:bold">Personer</h4>
@if (_people == null)
{
    <img src="~/img/loader.gif" />
}
else
{
    <table class="table table-striped" id="peopleTable">
        <thead>
            <tr>
                <th>Förnamn</th>
                <th>Efternamn</th>
                <th>Mailadress</th>
                <th style="display: none">id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in _people)
            {
                <tr>
                    <td title="Gå till" @onclick="() => Navigate(person.Id)">@person.FirstName</td>
                    <td title="Gå till" @onclick="() => Navigate(person.Id)">@person.LastName</td>
                    <td>@person.EmailAddress</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => UpdatePerson(person)">Uppdatera</button>|
                        <button class="btn btn-danger" @onclick="() => DeletePersonAsync(person.Id)">Ta bort</button>
                    </td>
                    <td style="display: none">@person.Id</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Person> _people;
    private DisplayPerson _displayPerson = new DisplayPerson();
    public bool IsVisible { get; set; }
    public string RecordName { get; set; }
    public bool IsValid { get; set; }
    public bool IsDeleting { get; set; }
    private string ApiBaseUri { get; set; }

    private void SetApiBaseUri()
    {
        ApiBaseUri = Configuration.GetSection("ApiBaseUri").Value;
    }
    protected override async Task OnInitializedAsync()
    {
        SetApiBaseUri();
        await InitializeOrReloadPeopleTableAsync();
    }

    private async Task InitializeOrReloadPeopleTableAsync()
    {
        try
        {
            // _people = await HttpClient.GetJsonAsync<List<Person>>($"{ApiBaseUri}/api/people/get"); //gammal metod som använder prerelease nuget paket
            var result = HttpClient.GetAsync($"{ApiBaseUri}/api/people/getall", HttpCompletionOption.ResponseHeadersRead);
            var contentStream = await result.Result.Content.ReadAsStreamAsync();
            _people = await JsonSerializer.DeserializeAsync<List<Person>>(contentStream, new JsonSerializerOptions { IgnoreNullValues = true, PropertyNameCaseInsensitive = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void Navigate(int id)
    {
        NavigationManager.NavigateTo($"/people/persondetail/{id}");
    }
    private async Task SavePersonAsync()
    {
        var person = new Person
        {
            FirstName = _displayPerson.FirstName,
            LastName = _displayPerson.LastName,
            EmailAddress = _displayPerson.EmailAddress
        };
        //Lägger till ny person
        if (_displayPerson.Id == 0)
        {

            //  await HttpClient.PostJsonAsync($"{ApiBaseUri}/api/people/post", person); //lägger till ny person //gammal metod som använder prerelease nuget paket
            var content = JsonConvert.SerializeObject(person);
            var buffer = Encoding.UTF8.GetBytes(content);
            var byteContent = new ByteArrayContent(buffer);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            await HttpClient.PostAsync($"{ApiBaseUri}/api/people/post", byteContent);
            _people.Add(person);

            var result = HttpClient.GetAsync($"{ApiBaseUri}/api/people/getlastinsertedpersonid", HttpCompletionOption.ResponseHeadersRead);
            var contentStream = await result.Result.Content.ReadAsStreamAsync();
            person.Id = await JsonSerializer.DeserializeAsync<int>(contentStream, new JsonSerializerOptions { IgnoreNullValues = true, PropertyNameCaseInsensitive = true });
            // await SetLastPersonIdAsync();
            StateHasChanged();//uppdatera tabellen
        }
        else
        {
            //await HttpClient.PutJsonAsync($"{ApiBaseUri}/api/people/put/{_displayPerson.Id}", person); //uppdaterar värden för befintlig, gammal metod som använder prerelease nuget paket

            var content = JsonConvert.SerializeObject(person);
            var buffer = Encoding.UTF8.GetBytes(content);
            var byteContent = new ByteArrayContent(buffer);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            await HttpClient.PutAsync($"{ApiBaseUri}/api/people/put/{_displayPerson.Id}", byteContent);
            await InitializeOrReloadPeopleTableAsync(); //uppdatera tabellen
        }
        IsVisible = true;
        IsValid = true;
        RecordName = person.FirstName + " " + person.LastName;
        _displayPerson = new DisplayPerson();
    }

    //private async Task SetLastPersonIdAsync()
    //{
    //    //var result = HttpClient.GetAsync($"{ApiBaseUri}/api/people/getall", HttpCompletionOption.ResponseHeadersRead);
    //    //var contentStream = await result.Result.Content.ReadAsStreamAsync();
    //    //var people = await JsonSerializer.DeserializeAsync<List<Person>>(contentStream, new JsonSerializerOptions { IgnoreNullValues = true, PropertyNameCaseInsensitive = true });

    //    ////people = await HttpClient.GetJsonAsync<List<Person>>($"{ApiBaseUri}/api/people/get");//gammal metod som använder prerelease nuget paket

    //    person.Id = people.Max(x => x.Id);
    //}

    private void UpdatePerson(Person person)
    {
        _displayPerson.Id = person.Id;
        _displayPerson.FirstName = person.FirstName;
        _displayPerson.LastName = person.LastName;
        _displayPerson.EmailAddress = person.EmailAddress;
    }

    private async Task DeletePersonAsync(int id)
    {
        //var person = await HttpClient.GetJsonAsync<Person>($"{ApiBaseUri}/api/people/get/{id}"); //gammal metod som använder prerelease nuget paket
        var result = HttpClient.GetAsync($"{ApiBaseUri}/api/people/getperson/{id}", HttpCompletionOption.ResponseHeadersRead);
        var contentStream = await result.Result.Content.ReadAsStreamAsync();
        var person = await JsonSerializer.DeserializeAsync<Person>(contentStream, new JsonSerializerOptions { IgnoreNullValues = true, PropertyNameCaseInsensitive = true });
        await HttpClient.DeleteAsync($"{ApiBaseUri}/api/people/delete/{id}");

        RecordName = person.FirstName + " " + person.LastName;
        IsDeleting = true;
        IsVisible = true;

        await InitializeOrReloadPeopleTableAsync();
    }

    private async Task CloseServerValidationDivOnDelay() //stänger ner alert komponenten efter en viss tid
    {
        await Task.Delay(new TimeSpan(0, 0, 5)).ContinueWith(t =>
        {
            IsVisible = false;
            IsDeleting = false;
        });
    }
}

