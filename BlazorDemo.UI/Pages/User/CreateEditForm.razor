@page "/"
@page "/User/CreateEditForm"

<PageTitle Value="Användare" />
<hr />

<AlertMessage IsVisible="IsVisible" IsValid="IsValid" IsSuccess="IsSuccess">
    @*    <span>@RecordName</span>*@
</AlertMessage>

<EditForm Model="@_displayUser" OnValidSubmit="@SaveUserAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>
        Förnamn
        <InputText id="firstName" @bind-Value="@_displayUser.FirstName" placeholder="Förnamn"></InputText>
    </label>
    <label>
        Efternamn
        <InputText id="lastName" @bind-Value="@_displayUser.LastName" placeholder="Efternamn"></InputText>
    </label>
    <label>
        Mailadress
        <InputText id="emailAddress" @bind-Value="@_displayUser.EmailAddress" placeholder="Email"></InputText>
    </label>

    <button type="submit" class="btn btn-primary">Spara</button>
</EditForm>

<List @ref="ListComponent" ItemType="users" OnUpdateButtonClicked="SetUpdateFormData" OnDeleteButtonClicked="DeleteUserAsync"></List>

@code {
    List ListComponent;
    public List<User> _users;
    private DisplayUser _displayUser = new DisplayUser();
    public bool IsVisible { get; set; }
    public string RecordName { get; set; }
    public bool IsValid { get; set; }
    //public bool IsPosting { get; set; }
    //public bool IsUpdating { get; set; }
    //public bool IsDeleting { get; set; }
    public bool IsSuccess { get; set; }
    private string ApiBaseUri { get; set; }

    private void SetApiBaseUri()
    {
        ApiBaseUri = Configuration.GetSection("ApiBaseUri").Value;
    }

    protected override async Task OnInitializedAsync()
    {
        SetApiBaseUri();
        await base.OnInitializedAsync();
    }

    public void SetUpdateFormData(User user)
    {
        _displayUser.Id = user.UserId;
        _displayUser.FirstName = user.FirstName;
        _displayUser.LastName = user.LastName;
        _displayUser.EmailAddress = user.EmailAddress;
    }

    private async Task DeleteUserAsync(int id)
    {
        try
        {
            var result = HttpClient.GetAsync($"{ApiBaseUri}/api/user/get/{id}", HttpCompletionOption.ResponseHeadersRead);
            var contentStream = await result.Result.Content.ReadAsStreamAsync();
            var person = await JsonSerializer.DeserializeAsync<User>(contentStream, new JsonSerializerOptions { IgnoreNullValues = true, PropertyNameCaseInsensitive = true });
            var response = await HttpClient.DeleteAsync($"{ApiBaseUri}/api/user/delete/{id}");
            if (response.IsSuccessStatusCode)
            {
                // RecordName = person.FirstName + " " + person.LastName;
                await ListComponent.GetUsersAsync();
                IsSuccess = true;
                IsValid = true;
                IsVisible = true;
                //IsDeleting = true;
            }
            else
            {
                // IsSuccess = false;
            }
            //  IsVisible = true;
        }
        catch (UriFormatException ex)
        {

        }
    }

    private async Task SaveUserAsync()
    {
        var user = new User
            {
                FirstName = _displayUser.FirstName,
                LastName = _displayUser.LastName,
                EmailAddress = _displayUser.EmailAddress
            };
        try
        {
            //Lägger till ny användare
            if (_displayUser.Id == 0)
            {
                //IsPosting = true;
                var content = JsonConvert.SerializeObject(user);
                var buffer = Encoding.UTF8.GetBytes(content);
                var byteContent = new ByteArrayContent(buffer);
                byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                var response = await HttpClient.PostAsync($"{ApiBaseUri}/api/user/post", byteContent);
                if (response.IsSuccessStatusCode)
                {
                    await ListComponent.GetUsersAsync();
                    var result = HttpClient.GetAsync($"{ApiBaseUri}/api/user/getlastinserteduserid", HttpCompletionOption.ResponseHeadersRead);
                    var contentStream = await result.Result.Content.ReadAsStreamAsync();
                    user.UserId = await JsonSerializer.DeserializeAsync<int>(contentStream, new JsonSerializerOptions { IgnoreNullValues = true, PropertyNameCaseInsensitive = true });
                    IsValid = true;
                    IsSuccess = true;
                }
                else
                {
                    //IsPosting = false;
                    IsSuccess = false;
                }
            }
            else
            {
                //IsUpdating = true;
                var content = JsonConvert.SerializeObject(user);
                var buffer = Encoding.UTF8.GetBytes(content);
                var byteContent = new ByteArrayContent(buffer);
                byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                var response = await HttpClient.PutAsync($"{ApiBaseUri}/api/user/put/{_displayUser.Id}", byteContent);
                if (response.IsSuccessStatusCode)
                {
                    await ListComponent.GetUsersAsync();
                    IsValid = true;
                    IsSuccess = true;
                }
                else
                {
                    //IsUpdating = false;
                    IsSuccess = false;
                }
            }
            IsVisible = true;
            RecordName = user.FirstName + " " + user.LastName;
            _displayUser = new DisplayUser();
        }
        catch (UriFormatException ex)
        {

        }
    }
}

